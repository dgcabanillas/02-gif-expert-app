{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","index","setIndex","value","setValue","active","setActive","onSubmit","e","preventDefault","trim","length","newCategory","id","title","categories","setTimeout","type","onChange","target","className","placeholder","src","alt","getGifs","category","a","searchWord","replace","url","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGridItem","image","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qNAoDeA,EAhDK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEfC,mBAAS,GAFM,mBAElCC,EAFkC,KAE3BC,EAF2B,OAGfF,mBAAS,IAHM,mBAGlCG,EAHkC,KAG3BC,EAH2B,OAIbJ,mBAAU,YAJG,mBAIlCK,EAJkC,KAI1BC,EAJ0B,KAwBzC,OACI,0BAAMC,SAlBW,SAAAC,GAEjB,GADAA,EAAEC,iBACEN,EAAMO,OAAOC,OAAS,EAAI,CAC1B,IAAMC,EAAc,CAChBC,GAAIZ,EACJa,MAAOX,GAEXJ,GAAe,SAAAgB,GAAU,OAAMH,GAAN,mBAAsBG,OAC/CX,EAAS,IACTF,EAASD,EAAM,GAEnBK,EAAU,UACVU,YAAW,WACPV,EAAU,cACX,OAKC,2BACIW,KAAK,OACLd,MAAOA,EACPe,SAvBc,SAACV,GAAD,OAAOJ,EAAUI,EAAEW,OAAOhB,QAwBxCiB,UAAU,YACVC,YAAY,4BAEhB,4BACIJ,KAAK,SACLd,MAAM,SACNiB,UAAWf,GAEX,yBAAKiB,IAAI,sDAAsDC,IAAI,c,uBC1CtEC,EAAO,uCAAG,WAAQC,GAAR,yBAAAC,EAAA,6DAEbC,EAAaF,EAASG,QAAQ,IAAK,KACnCC,EAHa,iDAGoCF,EAHpC,8DAIAG,MAAOD,GAJP,cAIbE,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHvB,GAAIuB,EAAIvB,GACRC,MAAOsB,EAAItB,MACXe,IAAG,UAAEO,EAAIC,cAAN,aAAE,EAAYC,iBAAiBT,QAVvB,kBAaZK,GAbY,4CAAH,sDCaLK,EAXK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEX1B,EAAe0B,EAAf1B,MAAOe,EAAQW,EAARX,IAEf,OACI,yBAAKT,UAAU,qDACX,yBAAKE,IAAMO,EAAMN,IAAMT,MCkBpB2B,EAtBC,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SAAe,ECDN,SAAEA,GAAe,IAAD,EAEdzB,mBAAS,CAC/BiC,KAAM,GACNS,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAW,WACPrB,EAASC,GACJqB,MAAM,SAAAC,GAAI,OACPH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAGtB,CAACjB,IAEGkB,EDd4BK,CAAcvB,EAASX,OAA7CuB,EAFiB,EAEtBJ,KAAcS,EAFQ,EAERA,QACtB,OACI,yBAAKtB,UAAU,gCACX,wBAAIA,UAAU,cAAd,IAA8BK,EAASX,MAAvC,KACA,yBAAKM,UAAU,aACTsB,EACE,wCAEAL,EAAOF,KAAK,SAAAK,GAAK,OACb,kBAAC,EAAD,CACIS,IAAMT,EAAM3B,GACZ2B,MAAOA,UEQpBU,EArBM,WAAO,IAAD,EAEalD,mBAAU,CAAC,CAAEa,GAAI,EAAGC,MAAO,eAFxC,mBAEhBC,EAFgB,KAEJhB,EAFI,KAIvB,OACI,yBAAKqB,UAAU,kBACX,gCACI,wBAAIA,UAAU,cAAd,kBACA,kBAAC,EAAD,CAAarB,cAAgBA,KAEjC,yBAAKqB,UAAU,SAEPL,EAAWoB,KAAK,SAAAV,GAAQ,OACpB,kBAAC,EAAD,CAAUwB,IAAKxB,EAASZ,GAAIY,SAAUA,UCZ9D0B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.fb642b55.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\nconst AddCategory = ( { setCategories } ) => {\r\n\r\n    const [index, setIndex] = useState(2);\r\n    const [value, setValue] = useState('');\r\n    const [active, setActive] = useState( 'inactive' )\r\n\r\n    const handleInputChange = (e) => setValue( e.target.value );\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if( value.trim().length > 2 ) {\r\n            const newCategory = {\r\n                id: index,\r\n                title: value\r\n            }\r\n            setCategories( categories => [ newCategory, ...categories ]);\r\n            setValue('');\r\n            setIndex(index+1);\r\n        }\r\n        setActive('active')\r\n        setTimeout(() => {\r\n            setActive('inactive');\r\n        }, 100)\r\n    }\r\n\r\n    return (  \r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={value}\r\n                onChange={handleInputChange}\r\n                className=\"shadow-in\"\r\n                placeholder=\"Busque sus gifs aquÃ­\"\r\n            />\r\n            <button \r\n                type=\"submit\"\r\n                value=\"Search\"\r\n                className={active}\r\n            > \r\n                <img src=\"https://img.icons8.com/android/24/000000/search.png\" alt=\"search\"/>\r\n            </button>\r\n        </form> \r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n \r\nexport default AddCategory;","export const getGifs = async ( category ) => {\r\n\r\n    const searchWord = category.replace(' ', '+');\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ searchWord }&limit=8&api_key=GYkvfSZZoc6vHBuNksIIP0QrCptYdU41`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n\r\n}","import React from 'react';\r\n\r\nconst GifGridItem = ({ image }) => {\r\n\r\n    const { title, url } = image;\r\n\r\n    return (  \r\n        <div className=\"card animate__animated animate__fadeIn shadow-out\"> \r\n            <img src={ url } alt={ title } />\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default GifGridItem;","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data:images , loading } =  useFetchGifs( category.title );\r\n    return (  \r\n        <div className=\"category-container shadow-in\"> \r\n            <h2 className=\"shadow-out\"> { category.title } </h2>\r\n            <div className=\"card-grid\">   \r\n                { loading ? \r\n                    <p> Loading </p>\r\n                    :\r\n                    images.map( image => \r\n                        <GifGridItem \r\n                            key={ image.id } \r\n                            image={image}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default GifGrid;","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            )\r\n    }, [category]);\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState( [{ id: 1, title: 'One Punch' }]);\n\n    return (\n        <div className=\"main-container\">\n            <header>\n                <h1 className=\"shadow-out\"> GifExpertApp </h1>\n                <AddCategory setCategories={ setCategories } />\n            </header>\n            <div className=\"cards\">\n                {\n                    categories.map( category => (\n                        <GifGrid  key={category.id} category={category} />\n                    ))\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp.jsx';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}